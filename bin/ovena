#!/bin/sh
#
# Ovena helper tool v. 0.3.1
#

VERSION="0.3.1"
DBNAME="$<DATABASE_NAME>"
DBUSER="$<DATABASE_USERNAME>"
OVENA_CONFIG="$<OVENA_CONFIG>"
ENV="${OVENA_CONFIG}/ovena.env"
alias _docker-compose="docker-compose -f ${OVENA_CONFIG}/docker-compose.yml"
alias _exec="_docker-compose exec"
alias _exec_db="_docker-compose exec -T \"$<DATABASE_DOCKER_IMAGE>\""

if [ ! -r "${ENV}" ]; then
    printf "ERROR: cannot read configuration file [%s]\n" "${ENV}"
    exit 1
fi

set -a
# shellcheck source=../dot-env
. "${ENV}" || exit 1

# Convert SMB server name to IP: for some reason hostname makes docker or docker-compose choke
SMB_SERVER_IP=$(getent hosts "${SMB_SERVER}" | awk '{ print $1 }')
export SMB_SERVER="${SMB_SERVER_IP}"

# Reset all variables that might be set
file=
verbose=0 # Variables to be evaluated as shell arithmetic should be initialized to a default or validated beforehand.

show_help() {
    printf "
Ovena v%s

ovena [-f|--file <filename>][-h|--help][-v|--verbose] <command>

Options:
    -h, --help          Print help screen and exit.
    -V, --version       Print version and quit.
    -f, --file=FILENAME Specify filename to backup to or to restore from.
    -v, --verbose       Increase verbosity.

Commands:
    start:      Start up the ovena stack (DB, orthanc, proxy).

    stop:       Shutdown the ovena stack (DB, orthanc, proxy).

    reload:     Restart only Orthanc service. Use to reload config changes.

    shell:      Launch a bash shell inside the Orthanc container.

    logs:       Continuosly print Orthanc service logs.

    import:     Import DICOM files insided the folder specified in --file 
                into Orthanc.

    backup:     Backup PostgreSQL database to <filename> in CIFS  
                share defined in %s/docker-compose.yml.

    restore:    Restore PostgreSQL database from <filename> in CIFS share
                defined in %s/docker-compose.yml.

    upgrade:    Upgrade ovena. Checks if there are new versions and upgrades.

" "${VERSION}" "${OVENA_CONFIG}" "${OVENA_CONFIG}"
}

_log() {
    printf " * %s\n" "$@"
}

while :; do
    case $1 in
    -h | -\? | --help) # Call a "show_help" function to display a synopsis, then exit.
        show_help
        exit
        ;;
    -f | --file) # Takes an option argument, ensuring it has been specified.
        if [ -n "$2" ]; then
            file=$2
            shift
        else
            printf 'ERROR: "--file" requires a non-empty option argument.\n' >&2
            exit 1
        fi
        ;;
    --file=?*)
        file=${1#*=} # Delete everything up to "=" and assign the remainder.
        ;;
    --file=) # Handle the case of an empty --file=
        printf 'ERROR: "--file" requires a non-empty option argument.\n' >&2
        exit 1
        ;;
    -V | --version)
        printf "\nThis is Ovena v%s \n\n" "${VERSION}"
        exit 0
        ;;
    -v | --verbose)
        verbose=$((verbose + 1)) # Each -v argument adds 1 to verbosity.
        ;;
    --) # End of all options.
        shift
        break
        ;;
    -?*)
        printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
        ;;
    *) # Default case: If no more options then break out of the loop.
        break ;;
    esac

    shift
done

_restore() {
    # If --file parameter starts with a slash, we are assuming the file is an absolute path and resides on the local file system.
    # If the file does not start wwith a slash, we assume it's on the smb share.
    _log "Restoring from ${file}"
    BKPFILE="${file}"
    BKPFILE_NAME="$(basename "${BKPFILE}")"
    BKPFILE_IN_CONTAINER="/mnt/backup/.backup.sql.gz"
    USEROPT="--username=${DBUSER}"

    _log "Dropping DB VOLUME"
    _docker-compose down || exit 1
    rm -rf /var/lib/docker/volumes/postgresql/*

    _log "Starting DB and restoring."
    _docker-compose up -d "$<DATABASE_DOCKER_IMAGE>" || exit 1
    _log "Waiting for DB to start"
    sleep 5
    case "${file}" in /*)
        if [ ! -r "${file}" ]; then printf "ERROR: No backup file [%s] was found.\n" "${file}" && exit 1; fi
        _log "Copying backup inside container"
        docker cp "${BKPFILE}" "ovena-postgres:${BKPFILE_IN_CONTAINER}" || exit 1
        ;;
    esac
    # DBUSER and DBNAME are created by default by the docker container
    case ${BKPFILE} in
    *.gz)
        UNCOMPRESSED="/mnt/backup/.backup.sql"
        printf " * Uncompressing backup... " &&
            printf "zcat %s > %s\n" "${BKPFILE_IN_CONTAINER}" "${UNCOMPRESSED}" | _exec_db bash
        printf "done.\n"
        ;;
    *.sql)
        UNCOMPRESSED="${BKPFILE_IN_CONTAINER}"
        ;;
    esac
    _log "Restoring backup" &&
        _exec_db /usr/bin/psql -v ON_ERROR_STOP=1 ${USEROPT} --file="${UNCOMPRESSED}" &&
        _exec_db rm -f "${UNCOMPRESSED}" "${BKPFILE_IN_CONTAINER}" &&
        _docker-compose up -d &&
        _log "Restore completed."
}

_older_or_same_version_available() {
    ver_available=$(curl -sL "https://api.github.com/repos/open-ortho/ovena/releases/latest" | jq -r ".tag_name")
    ver_installed="$VERSION"

    printf '%s\n%s\n' "$ver_installed" "$ver_available" | sort --check=quiet --version-sort
}

_upgrade() {
    # Find out if there is a newer version.
    if _older_or_same_version_available; then
        printf "No Updates available.\n"
        return 0
    fi

    _tmpdir="$(mktemp -d)"
    _tarball="$(mktemp)"
    # Download latest ovena package
    curl -sL "https://api.github.com/repos/open-ortho/ovena/tarball" >"${_tarball}"

    # Unpack and run install script
    cd "${_tmpdir}" &&
        tar zxvf "${_tarball}" &&
        cd ovena &&
        ./ovena-install.sh &&
        _log "Upgrade Completed succesfully."
}

_backup() {
    if [ -z "${file}" ]; then
        DBDUMPFILE="/mnt/backup/ovena-db-backup.sql"
    else
        DBDUMPFILE="/mnt/backup/${file}"
    fi
    printf "Backing up to %s... " "${DBDUMPFILE}"
    INPROGRESS="${DBDUMPFILE}.in-progress"

    _exec_db /usr/bin/pg_dump \
        --no-owner -U "${DBUSER}" "${DBNAME}" --file="${INPROGRESS}" || exit

    _exec_db mv "${INPROGRESS}" "${DBDUMPFILE}" || exit
    _log "done."
    printf "Compressing... "
    _exec_db gzip "${DBDUMPFILE}" || exit
    _log "done."
}

_import() {
    if [ -z "${file}" ]; then
        log "ERROR: You must specify an input folder using the --file paramenter"
        exit 1
    fi
    VOLUMI="${file}"
    LOG="/var/log/ovena_import.log"
    ORTHANC_IP=$(printf "%s" $ORTHANC_IP | sed 's/://')
    ORTHANC_PORT="443"

    # Launch a separate import process for every first level folder.
    for folder in $(find "${VOLUMI}" -type d -maxdepth 1); do
        DIR=$(basename "${folder}")
        printf "Launching import of %s..." "${folder}"
        ./ImportDicomFiles.py "${ORTHANC_IP}" "${ORTHANC_PORT}" "${folder}" "${OVENA_CONFIG}/orthanc/users.json" >>"${LOG}/${DIR}_import.log" &
        echo "done."
    done

}

command="${1}"
case ${command} in
start)
    _docker-compose up -d
    exit
    ;;
stop)
    _docker-compose down
    exit
    ;;
reload)
    _docker-compose restart orthanc
    exit
    ;;
logs)
    _docker-compose logs -f orthanc
    exit
    ;;
shell)
    _exec orthanc bash
    exit
    ;;
backup)
    _backup
    exit
    ;;
restore)
    _restore
    exit
    ;;
upgrade)
    _upgrade
    exit
    ;;
import)
    _import
    exit
    ;;
*)
    show_help
    exit
    ;;
esac
